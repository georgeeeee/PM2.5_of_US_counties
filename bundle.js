(function (React$1, ReactDOM, d3$1, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://cdn.jsdelivr.net/npm/us-atlas@3/counties-albers-10m.json';

  const useUsaGeo = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3$1.json(jsonUrl).then(topology => {
        const { counties } = topology.objects;
        const { states } = topology.objects;
        setData([
          topojson.feature(topology, counties),
          topojson.feature(topology, states),
          topojson.mesh(topology, states, (a, b) => a !== b)
        ]);
      });
    }, []);

    return data;
  };

  const dataFilter = (data, year) => {
    return new Map(data.map(obj => [obj.id, +obj['pm25_' + year]]));
  };

  const projection = d3$1.geoIdentity().reflectY(false);
  const path = d3$1.geoPath(projection);

  const Marks = ({ UsaGeo, data, year, colorScale }) => {
    let dataMap = dataFilter(data, year);
    const states = new Map(UsaGeo[1].features.map(d => [d.id, d.properties.name]));
    
    projection.fitExtent(
      [
        [0, 0],
        [975, 500],
      ],
      UsaGeo[0]
    );
    return (
      React.createElement( 'g', { className: "marks" },
        UsaGeo[0].features.map((feature) => {
          return ( 
          	React.createElement( 'path', { 
              className: "border", d: path(feature), fill: colorScale(dataMap.get(feature.id)) ? 
                   colorScale(dataMap.get(feature.id)) :
                   "grey" },
              React.createElement( 'title', null,
                feature.properties.name, ", ", states.get(feature.id.slice(0, 2)), " ", dataMap.get(feature.id)
              )
            )
          )
        }),
        React.createElement( 'path', { className: "interiors", d: path(UsaGeo[2]) })
      )
    );
  };

  const csvUrl = 'https://gist.githubusercontent.com/georgeeeee/0342e8e427e75c369d5981550dd4b83c/raw/ea121927ead3ce1fb41dabcb7395fb1eaa6dda0d/pm2.5ByCounty.csv';

  const useData = () => {
  	const [data, setData] = React$1.useState(null);
    
    React$1.useEffect(() => {
      let max = 0;
      let min = 20;
      
      const row = d => {
        for (const property in d) {
        	if (property === "id")
            continue;
          if (+d[property] > max) {
          	max = +d[property];
          }
          if (+d[property] < min) {
          	min = +d[property];
          }
        }
      	return d;
      };
    	d3$1.csv(csvUrl, row).then((res) => {
        res.max = max;
        res.min = min;
        setData(res);
      });
    }, []);
    
    return data;
  };

  const legendScale = d3.scaleLinear()
      .domain([0, 19])
      .range([0, 200]);

  const ColorLegend = () => (
    React$1__default.createElement( 'g', { transform: `translate(630, 15)` },
      React$1__default.createElement( 'defs', null,
        React$1__default.createElement( 'linearGradient', { id: "grad1", x1: "0%", y1: "0%", x2: "100%", y2: "0%" },
          React$1__default.createElement( 'stop', {
            offset: "0%", style: { stopColor: d3$1.interpolateYlGnBu(1), stopOpacity: 1 } }),
          React$1__default.createElement( 'stop', {
            offset: "25%", style: { stopColor: d3$1.interpolateYlGnBu(0.75), stopOpacity: 1 } }),
          React$1__default.createElement( 'stop', {
            offset: "50%", style: { stopColor: d3$1.interpolateYlGnBu(0.5), stopOpacity: 1 } }),
          React$1__default.createElement( 'stop', {
            offset: "75%", style: { stopColor: d3$1.interpolateYlGnBu(0.25), stopOpacity: 1 } }),
          React$1__default.createElement( 'stop', {
            offset: "100%", style: { stopColor: d3$1.interpolateYlGnBu(0), stopOpacity: 1 } })
        )
      ),
      React$1__default.createElement( 'text', { 'font-size': "10" }, "PM2.5 Concentration"),
      React$1__default.createElement( 'rect', { width: "200", height: "15", y: "2", fill: "url(#grad1)" }),
      React$1__default.createElement( 'g', { fill: "none", 'font-size': "10", 'font-family': "sans-serif", 'text-anchor': "middle" },
        React$1__default.createElement( 'g', { class: "tick", opacity: "1", transform: `translate(${legendScale(0)},1)` },
          React$1__default.createElement( 'line', { stroke: "black", y2: "24" }),
          React$1__default.createElement( 'text', { fill: "currentColor", y: "26", dy: "0.71em" }, "0")
        ),
        React$1__default.createElement( 'g', { class: "tick", opacity: "1", transform: `translate(${legendScale(5)},1)` },
          React$1__default.createElement( 'line', { stroke: "black", y2: "24" }),
          React$1__default.createElement( 'text', { fill: "currentColor", y: "26", dy: "0.71em" }, "5")
        ),
        React$1__default.createElement( 'g', { class: "tick", opacity: "1", transform: `translate(${legendScale(10)},1)` },
         	React$1__default.createElement( 'line', { stroke: "black", y2: "24" }),
          React$1__default.createElement( 'text', { fill: "currentColor", y: "26", dy: "0.71em" }, "10")
        ),
        React$1__default.createElement( 'g', { class: "tick", opacity: "1", transform: `translate(${legendScale(15)},1)` },
          React$1__default.createElement( 'line', { stroke: "black", y2: "24" }),
          React$1__default.createElement( 'text', { fill: "currentColor", y: "26", dy: "0.71em" }, "15")
        )
      )
    )
  );

  const width = 960;
  const height = 500;
  const colorScale = d3.scaleSequential(d3.interpolateYlGnBu).domain([19, 0]);

  const App = () => {
    const data = useData();
    const UsaGeo = useUsaGeo();
    const [year, setYear] = React$1.useState(2000);

    if (!UsaGeo || !data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const handleSliderChange = (event) => {
      setYear(event.target.value);
    };

    const play = () => {
      if (year === 2018) return;

      let y = year;
      const x = setInterval(() => {
        y++;
        setYear(y);
        console.log(y);
        if (y === 2018) {
          clearInterval(x);
        }
      }, 1000);
    };

    return (
      React$1__default.createElement( 'div', { class: "flex-container" },
        React$1__default.createElement( 'div', { class: "slider-wrapper" },
          React$1__default.createElement( 'label', { for: "year" }, "Year ", year),
          React$1__default.createElement( 'div', null,
            React$1__default.createElement( 'input', {
              type: "range", id: "year", name: "year", min: "2000", max: "2018", step: "1", list: "tickmarks", value: year, onChange: (e) => handleSliderChange(e) }),
            React$1__default.createElement( 'datalist', { id: "tickmarks" },
              React$1__default.createElement( 'option', { value: "2000", label: "2000" }),
              React$1__default.createElement( 'option', { value: "2001", label: "2001" }),
              React$1__default.createElement( 'option', { value: "2002", label: "2002" }),
              React$1__default.createElement( 'option', { value: "2003", label: "2003" }),
              React$1__default.createElement( 'option', { value: "2004", label: "2004" }),
              React$1__default.createElement( 'option', { value: "2005", label: "2005" }),
              React$1__default.createElement( 'option', { value: "2006", label: "2006" }),
              React$1__default.createElement( 'option', { value: "2007", label: "2007" }),
              React$1__default.createElement( 'option', { value: "2008", label: "2008" }),
              React$1__default.createElement( 'option', { value: "2009", label: "2009" }),
              React$1__default.createElement( 'option', { value: "2010", label: "2010" }),
              React$1__default.createElement( 'option', { value: "2011", label: "2011" }),
              React$1__default.createElement( 'option', { value: "2012", label: "2012" }),
              React$1__default.createElement( 'option', { value: "2013", label: "2013" }),
              React$1__default.createElement( 'option', { value: "2014", label: "2014" }),
              React$1__default.createElement( 'option', { value: "2015", label: "2015" }),
              React$1__default.createElement( 'option', { value: "2016", label: "2016" }),
              React$1__default.createElement( 'option', { value: "2017", label: "2017" }),
              React$1__default.createElement( 'option', { value: "2018", label: "2018" })
            )
          ),
          React$1__default.createElement( 'input', {
            type: "button", value: "play", style: { width: 50, marginTop: 10 }, onClick: play })
        ),

        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( Marks, {
            UsaGeo: UsaGeo, data: data, year: year, colorScale: colorScale }),
          React$1__default.createElement( 'g', null,
            React$1__default.createElement( ColorLegend, null )
          )
        )
      )
    );
  };

  ReactDOM.render(React$1__default.createElement( App, null ), document.getElementById('root'));

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,